name: "Deploy Infrastructure with Terraform"

on:
  push:
    branches:
      - main
    paths:
      - "infra/**"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "terraform-deploy"
  cancel-in-progress: false

jobs:
  plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.plan-status.outputs.changes }}
    env:
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # - name: Download Encrypted .tfstate & Decrypt
      #   uses: badgerhobbs/terraform-state@v2
      #   with:
      #     encryption_key: ${{ secrets.TFSTATE_ENCRYPTION_KEY }}
      #     operation: download
      #     location: artifact
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     directory: infra
      #   continue-on-error: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: infra

      - name: Terraform Plan
        id: tf-plan
        # -detailed-exitcode returns:
        # 0 = No changes
        # 1 = Error
        # 2 = Changes present
        run: |
          terraform plan -detailed-exitcode -out tfplan || echo "exitcode=$?" >> $GITHUB_OUTPUT
        working-directory: infra
        continue-on-error: true

      - name: Check Plan Status
        id: plan-status
        run: |
          if [ "${{ steps.tf-plan.outputs.exitcode }}" == "2" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infra/tfplan
        if: steps.plan-status.outputs.changes == 'true'

  apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: plan
    if: needs.plan.outputs.changes == 'true'
    env:
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    environment:
      name: cloudflare
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # - name: Download Encrypted .tfstate & Decrypt
      #   uses: badgerhobbs/terraform-state@v2
      #   with:
      #     encryption_key: ${{ secrets.TFSTATE_ENCRYPTION_KEY }}
      #     operation: download
      #     location: artifact
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     directory: infra
      #   continue-on-error: true

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: infra/

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: infra

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra

      - name: Encrypt .tfstate & Upload
        uses: badgerhobbs/terraform-state@v2
        with:
          encryption_key: ${{ secrets.TFSTATE_ENCRYPTION_KEY }}
          operation: upload
          location: artifact
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: infra
